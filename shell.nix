{
  pkgs ? import <nixpkgs> { },
  system,
  inputs,
}:
let
  pre-commit-check = inputs.pre-commit-hooks.lib.${system}.run {
    src = ./.;
    hooks = {
      #general stuff
      end-of-file-fixer.enable = true;
      trim-trailing-whitespace.enable = true;
      check-added-large-files.enable = true;
      check-merge-conflicts.enable = true;
      check-symlinks.enable = true;
      codespell = {
        enable = true;
        name = "codespell";
        excludes = [ "^secrets/" ];
        entry = "${pkgs.codespell}/bin/codespell -w --ignore-words-list=hass,edn,pinchin,bootup";
      };
      #nix
      nixfmt-rfc-style.enable = true;
      #bash
      shellcheck = {
        enable = true;
        excludes = [
          ".envrc"
        ];
      };
      shfmt.enable = true;
      #python
      check-docstring-first.enable = true;
      check-builtin-literals.enable = true;
      check-python.enable = true;
      python-debug-statements.enable = true;
      ruff.enable = true;
      ruff-format = {
        enable = true;
        args = [
          "--line-length"
          "100"
        ];
      };
      #sops
      pre-commit-hook-ensure-sops.enable = true;
    };
  };
  myPythonPackages =
    ps: with ps; [
      bonsai # for development of hass ldap script
    ];
in
pkgs.mkShell {
  buildInputs =
    with pkgs;
    [
      sops
      nebula
      (callPackage ./generic/packages/createNebulaDevice/package.nix { })
      (callPackage ./generic/packages/deployment/package.nix { })
      (python313.withPackages myPythonPackages)
    ]
    ++ pre-commit-check.enabledPackages;

  shellHook = ''
    localOverwriteFile=".pre-commit-config.yaml"
    if ! grep -q "This file was generated by git-hooks.nix" "$localOverwriteFile"; then
        git update-index --skip-worktree "$localOverwriteFile"
        rm "$localOverwriteFile"
    fi
  ''
  + pre-commit-check.shellHook;
}
